---
description: 
globs: .spec.ts
alwaysApply: false
---
# 테스트 코드 작성 규칙

AI가 테스트 코드를 생성할 때 다음 규칙을 따릅니다.

1.  **파일 이름**: 테스트 파일은 `*.spec.ts` 또는 `*.test.ts` 패턴을 따릅니다.
2.  **테스트 구조**:
    *   `describe`: 테스트할 컴포넌트나 함수의 이름을 명시합니다.
    *   `context` (or `describe`): 테스트하는 특정 상황이나 시나리오를 설명합니다.
    *   `it`: 예상되는 동작을 명확하게 기술합니다. "it should..." 형식으로 작성합니다.
3.  **AAA 패턴 (Arrange, Act, Assert)**:
    *   **Arrange (준비)**: 테스트에 필요한 변수, 입력, mock 등을 설정합니다.
    *   **Act (실행)**: 테스트할 함수나 코드를 실행합니다.
    *   **Assert (검증)**: 실행 결과가 예상과 일치하는지 확인합니다.
4.  **독립성**: 각 테스트는 다른 테스트에 의존하지 않고 독립적으로 실행될 수 있어야 합니다.
5.  **Mocking**: 외부 의존성 (API 호출, 데이터베이스 등)은 `jest.mock()` 이나 유사한 라이브러리를 사용하여 mock 처리해야 합니다. 실제 네트워크나 데이터베이스에 접근하지 않습니다.
6.  **다양한 케이스 테스트**:
    *   성공 케이스 (Happy path)
    *   에러 케이스 (Error cases)
    *   엣지 케이스 (Edge cases, e.g., null, undefined, empty array)
7.  **간결성**: 테스트는 가능한 한 간단하고 명확하게 유지합니다. 하나의 `it` 블록은 하나의 기능만 테스트하는 것을 원칙으로 합니다.
8.  **비동기 코드**: `async/await`를 사용하여 비동기 코드를 적절히 처리하고, `resolves`, `rejects`와 같은 matcher를 사용합니다.

